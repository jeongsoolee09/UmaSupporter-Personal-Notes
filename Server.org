* ~Umamusume.Server~

** 2022-04-22 21:07:05

*** DONE ~umamusume_test.test_umamusume_event~ 테스트

**** DONE 에러 1
CLOSED: [2022-04-26 Tue 17:02]

#+begin_example
AssertionError: assert 12 == 24
#+end_example

요런데, ~<h3 id="tuuzyou_a">通常イベント(選択肢あり)</h3>~ 랑 ~<h3 id="isyou_a">勝負服イベント</h3>~ 사이에 있는 ~<div class="uma_choice_table">~ 는 12개밖에 없어서 사실 actual이 12가 되어야 한다.

#+begin_quote
- 通常イベント(選択肢あり): 12개 (일반: 옵션 있음)
- 勝負服イベント: 3개 (승부복)
- お出かけイベント: 5개 (외출)
- 通常イベント(選択肢なし): 14개 (일반: 옵션 없음)
- レース後イベント: 10개 (경주 후)
- 共通イベント: 20개 (공통)
#+end_quote

이 중에서 통상 옵션있음, 승부복, 외출, 경주후

#+begin_quote
- 通常イベント(選択肢あり): 12개 (일반: 옵션 있음)
- 勝負服イベント: 3개 (승부복)
- お出かけイベント: 5개 (외출)
- レース後イベント: 10개 (경주 후)
#+end_quote

이제 h3에서 시작해서 다음의 h3까지를 선택하는 헬퍼가 필요 --> 구현 완료.

pytest도 soup2, soup3, soup4를 추가해서 확장 완료.

**** ABORTED 에러 2
CLOSED: [2022-04-26 Tue 17:02]

는 경로 문제인 것 같은데 잘 모르겠음 (내 맥북에서만 테스트 실패하는 듯)

** 2022-04-26 16:56:39

*** TODO ~UmaCruise~ 공부

**** DONE ~AboutDlg~
CLOSED: [2022-04-26 Tue 17:29]

*UI 클래스*

MFC 앱을 만들기 위한 여러 이벤트 핸들러들

- ~CAboutDlg::OnCloseCmd int (int, int, int, int &)~
- ~CAboutDlg::OnInitDialog int (int, int, int, int &)~
- ~CAboutDlg::OnLinkClick int (int, int, int &)~
- ~CAboutDlg::OnLinkClickHomePage int (int, int, int &)~
- ~CAboutDlg::OnLinkClickLatestVersion int (int, int, int &)~
- ~CAboutDlg::OnOCR int (int, int, int, int &)~

여기서 핵심은 OnOCR인데, 한줄한줄 뜯어본 것은 아니지만 대충 OnOCR은 이런저런 필터를 가져다가 적용한 결과 7가지를 표시하는 (~cv::imshow~) 게 주 목적인 함수.

**** DONE ~Config~
CLOSED: [2022-04-26 Tue 17:57]

config을 json 형태로 읽고 쓰는 클래스

**** DONE ~ConfigDlg~
CLOSED: [2022-04-26 Tue 18:06]

*UI 클래스*

config 관련 다이얼로그

**** ABORTED ~MainDlg~
CLOSED: [2022-04-26 Tue 18:06]

*UI 클래스*

앱이 제공하는 여러 다이얼로그들과 그 헬퍼들

다 읽어보진 않았지만 별볼일 없는듯

**** ~PreviewWindow~

*UI 클래스*

**** ~RaceDateLibrary~



**** ~RaceListWindow~



**** ~RichEditPopup~



**** ~SkillLibrary~



**** ~TesseractWrapper~



**** ~UmaCruise~



**** ~UmaEventLibrary~



**** DONE ~UmaTextRecognizer~
CLOSED: [2022-04-29 Fri 21:56]

여기가 재밌는 부분.

- ~UmaTextRecognizer::GetIkuseiUmaMusumeName~
- ~UmaTextRecognizer::LoadSetting~
- ~UmaTextRecognizer::TextRecognizer~

***** TextRecognizer (중요!)

- 말딸 이름 (m_umaMusumeName)
- 현재 순서 (m_currentTurn)
- 이벤트명 (m_eventName)
- 이벤트 옵션 (m_eventBottomOption)

네 개를 찾아낸다.

이 메소드는 스크린샷이 찍히면 실행됨 (MainDlg::OnScreenShot).

****** 헬퍼들

- _AdjustBounds: CRect를 srcImage의 크기에 맞게 리사이징
- _InRangeHSVTextColorBounds: kHSVTextBounds의 최솟값/최댓값에 맞는 색역대? 범위? (뭐라 하나 그걸) 안에 들어오는 픽셀들만 모으기
- _IsEventNameIcon: 주어진 이미지가 event name icon인가?
  - cv::threshold로 이진화한 다음 하얀 픽셀이 과반수인지를 보는 방법

****** 일본어 코멘트 번역

- asyncに渡す関数オブジェクト: async에 전달할 함수 인자
- アイコンが存在した場合、認識範囲を右にずらす: 아이콘이 있으면 인식 범위를 오른쪽으로 이동
- テキストを囲う範囲を見つける: 텍스트를 둘러싸는 범위 찾기
- テキストを正確に囲ったイメージを切り出す: 텍스트를 정확하게 둘러싼 이미지를 잘라냅니다.
- グレースケール: 그레이스케일
- 反転: 반전
- 拡大: 확대
- 閾値: 쓰레시홀드
- イベント選択肢: 이벤트 선택지
- 画像における白文字率を確認して、一定比率以下のときは無視する: 화상의 백문자율을 확인하고, 일정 비율 이하일 때는 무시한다
- 白背景化: 흰색 배경화
- [レース予約完了]ダイアログかどうか調べる: [레이스 예약 완료] 대화상자를 확인
- 現在の日付: 현재 날짜
- 育成ウマ娘名[育成ウマ娘選択]: 육성 말딸명 [육성 말딸 선택]
- 現在の日付が見えない時だけ判定をする: 현재의 날짜가 보이지 않을 때만 판정을 한다
- 白背景黒文字(グレー反転閾値): 흰색 배경 검은 문자 (회색 반전 임계 값)
- 現在メニュー[トレーニング]: 현재 메뉴 [트레이닝]
- グレー化: 그레이스케일화
- トレーニング: 트레이닝
- 戻る: 뒤로
- 育成トップ: 육성 톱
- レース詳細: 레이스 상세
- [レース予約完了]ダイアログかどうか調べる: [레이스 예약 완료] 대화상자를 확인
- 戻るボタン が見つからなければ[レース予約完了]ダイアログではない: 뒤로 버튼을 찾을 수 없다면 레이스 예약 완료 대화 상자가 아닙니다.
- text を適当に変換してから listへ追加する: text를 적절하게 변환 한 다음 list에 추가
- (ジュニア|クラシック|シニア|ファイナルズ) : (주니어 | 클래식 | 수석 | 파이널스)

****** 파트 0: 예비 연산

필드값 초기화

#+begin_src c++
	m_umaMusumeName.clear();
	m_currentTurn.clear();
	m_eventName.clear();
	m_eventBottomOption.clear();
#+end_src

그리고 cv::Mat으로 주어진 이미지 변환

스트링을 계산하는 future를 담는 list를 두 개 만든다:

- ~TextFromImageFutureList~
- ~eventBottomOptionFutureList~

앞으로 6가지의 텍스트 데이터를 뽑아내기 위해 위의 두 리스트에다가 OCR하는 future를 만들어서 집어넣을 것.

****** 파트 1: イベント名 (이벤트명) 추출

소스 이미지에서 세 가지 이미지를 만들어서 OCR하게 할 것.

- *cutImage2*: 소스 이미지에서 이벤트명 텍스트에 해당하는 부분을 잘라낸 것
- *resizedImage*: cutImage2를 흑백으로 바꾸고, 반전한 다음 리사이즈
- *thresImage2*: resizedImage를 [0.0, 255.0]에 맞게 이진화
  
세 가지에 대해 OCR하는 future를 TextFromImageFutureList에다가 추가.

******* 파트 2: イベント選択肢 (이벤트 선택지)

- cutImage3: 소스 이미지에서 이벤트 선택지에 해당하는 부분을 잘라낸 것
- textImage: cutImage3에서 HSV 색역대에 들어가는 픽셀만 필터링한 것
- *thresImage*: cutImage3를 흑백으로 바꾸고, 리사이즈한 다음 [0.0, 255.0]에 맞게 이진화
- *invertedTextImage*: textImage를 반전한 것

thresImage랑 invertedTextImage를 OCR하는 future를 eventBottomOptionFutureList에다가 추가.

****** 파트 3: 現在の日付 (현재 날짜)

Turn은 (주니어 | 클래식 | 수석 | 파이널스) 넷 중 하나

- URA 레이스랑 아오하루 레이스의 Turn (?)에 대해 OCR하는 future를 m_currentTurn에다가 저장

*주의: 현재 날짜 데이터는 async로 안 넘기고 바로 처리 (~TextFromImage~)*

- 궁금: 얘는 왜 synchronous하게 처리될까?

- cutImage: Turn에 해당하는 텍스트 영역만 잘라낸 것
- textImage: cutImage에서 HSV 색역대에 들어가는 픽셀만 필터링한 것
- *invertedText*: textImage를 반전시킨 다음 동기적으로 OCR한 텍스트
- *resizedText*: cutImage를 리사이징만 한 다음 동기적으로 OCR한 텍스트

파트 3까지 실행되면 m_currentTurn에는 URA와 아오하루 두 개에 대해서 현재 날짜 텍스트가 쌓임.

****** 파트 4: 育成ウマ娘名[育成ウマ娘選択] (육성 말딸명 [육성 말딸 선택])

파트 3는 Turn이 *안* 보이면 실행됨. 즉, 파트 3과 파트 4가 실행되는 조건은 mutually exclusive.

*주의: 육성 말딸명도 현재 날짜와 마찬가지로, async로 안 넘기고 바로 처리 (~TextFromImage~)*

- thresImage2: 이름 부분을 원래 이미지에서 자르고, 그레이스케일하고, 반전 처리 한다음 OCR

이 방법으로 subName과 Name을 모두 찾아내고 (성과 이름? subName이 뭔지 모르겠네), m_umaMusumeName 스테이트에 저장

****** 파트 5: 現在メニュー[トレーニング] (현재 메뉴 [트레이닝])

- grayImage: 현재 메뉴 부분을 잘라내고 그레이스케일
- 트레이닝 메뉴, 뒤로 버튼이 모두 포착되면 m_bTrainingMenu 스테이트를 true로

****** 파트 6: 育成トップ (육성 톱)

/육성 톱/ 이 뭔지 모르겠네. 아마 육성 메뉴의 맨 윗부분??

- AbilityDetailBounds가 보이느냐 아니냐로 판단함. 원본 이미지만 자르고 사용함

****** 파트 7: レース詳細 (레이스 상세)

- 원본 이미지 자르고 HSV 색역대에 맞게 픽셀 추출했을 때, 하얀 픽셀이 일정 비율 이상이라면 반전한 다음에 이미지 추출
- 뒤로 가기 버튼이 있다면 (하얀 픽셀이 일정 비율 이상), 레이스 예약 완료. 미터 수를 추출해서 m_entryRaceDistance 스테이트에 저장

****** 파트 8: future 계산하고, normalization하고, 저장

1. future를 계산해서 결과값을 받는다.
2. 텍스트 노멀라이제이션
   1. 정오표를 보고 정정 (정오표는 Common.json 세팅파일에서 읽어옴: LoadSetting에서).
   2. 7과 /가 ! 대신 인식되는 문제를 해결
   3. ?의 폰트 교체

위의 과정을 TextFromImageFutureList와 eventBottomOptionFutureList에 대해 실행해서, 각각 m_eventName과 m_eventBottomOption 스테이트에 저장
